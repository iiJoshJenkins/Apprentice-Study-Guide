{"version":3,"sources":["components/Questions/Questions.js","App.js","serviceWorker.js","index.js"],"names":["Questions","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","questions","default","questionNumber","score","handlePress","bind","assertThisInitialized","getValueFromLetter","letter","console","error","e","currentQuestion","answers","correctAnswer","target","innerHTML","log","setState","_this2","react_default","a","createElement","length","className","question","map","key","onClick","Component","App","Questions_Questions_Questions","Questions_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sRAEqBA,qBACnB,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,UAAWT,EAAMS,UAAUC,QAC3BC,eAAgB,EAChBC,MAAO,GAETX,EAAKY,YAAcZ,EAAKY,YAAYC,KAAjBZ,OAAAa,EAAA,EAAAb,CAAAD,IACnBA,EAAKe,mBAAqBf,EAAKe,mBAAmBF,KAAxBZ,OAAAa,EAAA,EAAAb,CAAAD,IARTA,kFAUAgB,GACjB,OAAQA,GACN,IAAK,IACH,OAAO,EACT,IAAK,IACH,OAAO,EACT,IAAK,IACH,OAAO,EACT,IAAK,IACH,OAAO,EACT,QACEC,QAAQC,MAAM,8FAGRC,GACV,IAAMC,EAAkBjB,KAAKI,MAAMC,UAAUL,KAAKI,MAAMG,gBAEtDU,EAAgBC,QACdlB,KAAKY,mBAAmBK,EAAgBE,kBACpCH,EAAEI,OAAOC,YAEfP,QAAQQ,IAAItB,KAAKI,MAAMI,OACvBR,KAAKuB,SAAS,CAAEf,MAAOR,KAAKI,MAAMI,MAAQ,KAE5CR,KAAKuB,SAAS,CAAEhB,eAAgBP,KAAKI,MAAMG,eAAiB,qCAGrD,IAAAiB,EAAAxB,KACP,OACEyB,EAAAC,EAAAC,cAAA,WACG3B,KAAKI,MAAMG,eAAiBP,KAAKI,MAAMC,UAAUuB,QAChDH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,UAAK3B,KAAKI,MAAMC,UAAUL,KAAKI,MAAMG,gBAAgBuB,UACrDL,EAAAC,EAAAC,cAAA,MAAIE,UAAU,eACX7B,KAAKI,MAAMC,UAAUL,KAAKI,MAAMG,gBAAgBW,QAAQa,IACvD,SAAAf,GACE,OACES,EAAAC,EAAAC,cAAA,MAAIK,IAAKhB,GACPS,EAAAC,EAAAC,cAAA,UAAQE,UAAU,SAASI,QAAST,EAAKf,aACtCO,QAShBhB,KAAKI,MAAMG,gBAAkBP,KAAKI,MAAMC,UAAUuB,QACjDH,EAAAC,EAAAC,cAAA,OAAKE,UAAU,sBACbJ,EAAAC,EAAAC,cAAA,kDACAF,EAAAC,EAAAC,cAAA,8BACoB3B,KAAKI,MAAMI,MAD/B,IACuCR,KAAKI,MAAMC,UAAUuB,iBA/DjCM,cCMxBC,MAJf,WACE,OAAOV,EAAAC,EAAAC,cAACS,EAAD,CAAW/B,UAAWgC,KCOXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOnB,EAAAC,EAAAC,cAACkB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.c630dad3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport \"./Questions.css\";\r\nexport default class Questions extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      questions: props.questions.default,\r\n      questionNumber: 0,\r\n      score: 0\r\n    };\r\n    this.handlePress = this.handlePress.bind(this);\r\n    this.getValueFromLetter = this.getValueFromLetter.bind(this);\r\n  }\r\n  getValueFromLetter(letter) {\r\n    switch (letter) {\r\n      case \"A\":\r\n        return 0;\r\n      case \"B\":\r\n        return 1;\r\n      case \"C\":\r\n        return 2;\r\n      case \"D\":\r\n        return 3;\r\n      default:\r\n        console.error(\"There's something wrong with your correctAnswer value\");\r\n    }\r\n  }\r\n  handlePress(e) {\r\n    const currentQuestion = this.state.questions[this.state.questionNumber];\r\n    if (\r\n      currentQuestion.answers[\r\n        this.getValueFromLetter(currentQuestion.correctAnswer)\r\n      ] === e.target.innerHTML\r\n    ) {\r\n      console.log(this.state.score);\r\n      this.setState({ score: this.state.score + 1 });\r\n    }\r\n    this.setState({ questionNumber: this.state.questionNumber + 1 });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        {this.state.questionNumber < this.state.questions.length && (\r\n          <div className=\"Question_Container\">\r\n            <h3>{this.state.questions[this.state.questionNumber].question}</h3>\r\n            <ul className=\"Answer_List\">\r\n              {this.state.questions[this.state.questionNumber].answers.map(\r\n                e => {\r\n                  return (\r\n                    <li key={e}>\r\n                      <button className=\"Answer\" onClick={this.handlePress}>\r\n                        {e}\r\n                      </button>\r\n                    </li>\r\n                  );\r\n                }\r\n              )}\r\n            </ul>\r\n          </div>\r\n        )}\r\n        {this.state.questionNumber >= this.state.questions.length && (\r\n          <div className=\"Question_Container\">\r\n            <h1> You've completed all the questions </h1>\r\n            <h3>\r\n              Your score was : {this.state.score}/{this.state.questions.length}\r\n            </h3>\r\n          </div>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\nimport * as Questions_List from \"./assets/questions.json\";\nimport Questions from \"./components/Questions/Questions\";\n\nfunction App() {\n  return <Questions questions={Questions_List} />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}